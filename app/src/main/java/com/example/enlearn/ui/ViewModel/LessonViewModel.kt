package com.example.enlearn.ui.viewModel

import android.util.Log
import androidx.compose.runtime.State
import androidx.compose.runtime.mutableStateOf
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.enlearn.data.model.Chapter
import com.example.enlearn.data.model.Lesson
import com.google.firebase.firestore.FirebaseFirestore
import kotlinx.coroutines.async
import kotlinx.coroutines.awaitAll
import kotlinx.coroutines.launch
import kotlinx.coroutines.tasks.await

class ChapterViewModel : ViewModel() {
    private val db = FirebaseFirestore.getInstance()

    private val _chapters = mutableStateOf<List<Chapter>>(emptyList())
    val chapters: State<List<Chapter>> = _chapters

    init {
        fetchChapters()
    }

    private fun fetchChapters() {
        Log.d("ChapterViewModel", "üîç B·∫Øt ƒë·∫ßu fetch chapters t·ª´ Firestore (phi√™n b·∫£n Coroutine)")
        viewModelScope.launch {
            try {
                // 1. L·∫•y t·∫•t c·∫£ c√°c document chapter
                val chapterDocuments = db.collection("chapters").get().await().documents
                Log.d("ChapterViewModel", "‚úÖ Fetch th√†nh c√¥ng: ${chapterDocuments.size} documents chapter")

                // 2. D√πng async ƒë·ªÉ t·∫£i t·∫•t c·∫£ c√°c lesson c·ªßa t·∫•t c·∫£ c√°c chapter M·ªòT C√ÅCH SONG SONG
                val chapterJobs = chapterDocuments.map { doc ->
                    async { // M·ªói chapter l√† m·ªôt c√¥ng vi·ªác b·∫•t ƒë·ªìng b·ªô (job)
                        val chapterId = doc.id
                        val title = doc.getString("title")

                        if (title == null) {
                            Log.d("ChapterViewModel", "‚ö†Ô∏è B·ªè qua chapter [$chapterId] v√¨ thi·∫øu title")
                            return@async null // Tr·∫£ v·ªÅ null n·∫øu chapter kh√¥ng h·ª£p l·ªá
                        }

                        Log.d("ChapterViewModel", "üìò B·∫Øt ƒë·∫ßu x·ª≠ l√Ω Chapter: id=$chapterId, title=$title")

                        // L·∫•y lessons cho chapter n√†y
                        val lessonDocuments = db.collection("chapters").document(chapterId)
                            .collection("lessons").get().await().documents
                        Log.d("ChapterViewModel", "‚û°Ô∏è ƒê√£ fetch ${lessonDocuments.size} lessons cho chapter [$chapterId]")

                        val lessonList = lessonDocuments.mapNotNull { lessonDoc ->
                            val lessonId = lessonDoc.id
                            val lessonTitle = lessonDoc.getString("title") ?: return@mapNotNull null
                            Lesson(id = lessonId, title = lessonTitle, questions = emptyList())
                        }

                        Chapter(id = chapterId, title = title, lessons = lessonList)
                    }
                }

                // 3. Ch·ªù t·∫•t c·∫£ c√°c job t·∫£i lesson ho√†n th√†nh v√† l·ªçc ra nh·ªØng chapter h·ª£p l·ªá
                val chaptersList = chapterJobs.awaitAll().filterNotNull()

                // 4. S·∫ÆP X·∫æP DANH S√ÅCH SAU KHI ƒê√É C√ì T·∫§T C·∫¢ D·ªÆ LI·ªÜU
                val sortedChapters = chaptersList.sortedBy { chapter ->
                    extractNumberFromTitle(chapter.title)
                }
                Log.d("ChapterViewModel", "üéâ Ho√†n t·∫•t: ƒê√£ load v√† s·∫Øp x·∫øp ${sortedChapters.size} chapters")

                // 5. C·∫≠p nh·∫≠t State
                _chapters.value = sortedChapters

            } catch (e: Exception) {
                Log.e("ChapterViewModel", "‚ùå L·ªói trong qu√° tr√¨nh fetch v√† x·ª≠ l√Ω chapters", e)
            }
        }
    }
    private fun extractNumberFromTitle(title: String): Int {
        // S·ª≠ d·ª•ng bi·ªÉu th·ª©c ch√≠nh quy (Regex) ƒë·ªÉ t√¨m s·ªë ƒë·∫ßu ti√™n trong chu·ªói
        return Regex("""\d+""").find(title)?.value?.toIntOrNull() ?: Int.MAX_VALUE
    }
}

